var NewsHub = (() => {
  // resources/ts/utilities/query.ts
  function query(selector, context = null) {
    return Array.from((context || document).querySelectorAll(selector));
  }
  var query_default = query;

  // resources/ts/utilities/ready.ts
  function ready(factory) {
    if (typeof factory === "function") {
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", factory.bind(this));
      } else {
        factory();
      }
    } else {
      return new Promise((resolve) => {
        if (document.readyState === "loading") {
          document.addEventListener("DOMContentLoaded", resolve.bind(this, true));
        } else {
          resolve(true);
        }
      });
    }
  }
  var ready_default = ready;

  // resources/ts/components/anchors.ts
  function invokeAnchors(root) {
    let selector = [1, 2, 3, 4, 5, 6].map((i2) => `${root.dataset.target} > h${i2}`).join(", ");
    let headers = document.querySelectorAll(selector);
    let anchors = root.querySelectorAll("[data-toc-position]");
    if (headers.length === 0 || anchors.length === 0) {
      return;
    }
    let firstIsTop = headers.length < anchors.length;
    for (let i2 = 0; i2 < headers.length; i2++) {
      if (i2 === 0 && firstIsTop) {
        anchors[i2].addEventListener("click", (ev) => {
          ev.preventDefault();
          window.scrollTo({
            top: 0,
            behavior: "smooth"
          });
        });
      }
      let header = headers[i2];
      let anchor = anchors[firstIsTop ? i2 + 1 : i2].firstElementChild;
      if (!header.id || header.id === "") {
        header.id = anchor.hash.slice(1);
      } else {
        anchor.hash = `#${header.id}`;
      }
    }
    let currentHash = location.hash;
    if (currentHash && currentHash.length > 0) {
      let currentHeader = Array.from(headers).filter((h2) => h2.id === currentHash.slice(1));
      currentHeader[0].scrollIntoView();
    }
  }
  var anchors_default = () => {
    ready_default(() => {
      query_default('[data-handle="js-anchors"][data-target]').map((c2) => invokeAnchors(c2));
    });
  };

  // resources/ts/components/bootstrap.ts
  function invokeBootstrapDropdown(element) {
    document.addEventListener("click", (event) => {
      if (element === event.target || element.contains(event.target)) {
        event.preventDefault();
        let instance = window["Bootstrap"].Dropdown.getOrCreateInstance(element, {
          autoClose: true
        });
        instance._inNavbar = false;
        instance.toggle();
      } else {
        let instance = window["Bootstrap"].Dropdown.getInstance(element, {
          autoClose: true
        });
        if (instance && instance._isShown()) {
          instance.toggle();
        }
      }
    });
  }
  function invokeBootstrapTooltip(element) {
    if (element.hasAttribute("data-rat-init")) {
      return;
    }
    new window["Bootstrap"].Tooltip(element);
    element.dataset.ratInit = "1";
  }
  function invokeBootstrapPopover(element) {
    if (element.hasAttribute("data-rat-init")) {
      return;
    }
    new window["Bootstrap"].Popover(element);
    element.dataset.ratInit = "1";
  }
  var bootstrap_default = () => {
    ready_default(() => {
      query_default('[data-newshub-toggle="dropdown"]').map((el) => invokeBootstrapDropdown(el));
      query_default('[data-bs-toggle="tooltip"],[data-newshub-toggle="tooltip"]').map((el) => invokeBootstrapTooltip(el));
      query_default('[data-bs-toggle="popover"],[data-newshub-toggle="popover"]').map((el) => invokeBootstrapPopover(el));
    });
  };

  // resources/ts/components/color-picker.ts
  function invokeColorPicker(element) {
    const defaultScheme = window["newshub"].defaultScheme;
    function onLoad() {
      query_default('[data-newshub-toggle="color-picker"]').map((el) => {
        let style = localStorage.getItem("newshub-color-scheme") || defaultScheme;
        if (style === "light") {
          el.checked = false;
        } else {
          el.checked = true;
        }
      });
    }
    onLoad();
    element.addEventListener("change", (event) => {
      let style = localStorage.getItem("newshub-color-scheme") || defaultScheme;
      let newStyle = style === "light" ? "dark" : "light";
      localStorage.setItem("newshub-color-scheme", newStyle);
      let styling = document.createElement("style");
      styling.innerText = "*,*::before,*::after{ transition: all 0.25s ease 0ms !important; }";
      document.head.appendChild(styling);
      document.body.classList.remove(style);
      document.body.classList.add(newStyle);
      setTimeout(() => styling.remove(), 500);
      onLoad();
      const customEvent = new CustomEvent("newshub:scheme", { detail: { prev: style, now: newStyle } });
      document.dispatchEvent(customEvent);
    });
  }
  var color_picker_default = () => {
    ready_default(() => {
      query_default('[data-newshub-toggle="color-picker"]').map((el) => invokeColorPicker(el));
    });
  };

  // resources/ts/components/double-click.ts
  function invokeDoubleClick(element) {
    element.querySelector("button.double-click-button").addEventListener("click", (event) => {
      let template = element.querySelector("template");
      let content = template.content.firstElementChild || template.content.textContent.trim();
      if (typeof content === "string") {
        let container = document.createElement("DIV");
        container.innerHTML = content.replace(/\&quot\;/g, '"');
        content = container.firstElementChild;
      }
      element.replaceWith(content);
    });
  }
  var double_click_default = () => {
    ready_default(() => {
      query_default('[data-newshub-toggle="double-click"]').map((el) => invokeDoubleClick(el));
    });
  };

  // node_modules/keen-slider/keen-slider.es.js
  var n = function() {
    return n = Object.assign || function(n2) {
      for (var t2, i2 = 1, e2 = arguments.length; i2 < e2; i2++)
        for (var r2 in t2 = arguments[i2])
          Object.prototype.hasOwnProperty.call(t2, r2) && (n2[r2] = t2[r2]);
      return n2;
    }, n.apply(this, arguments);
  };
  function t(n2, t2, i2) {
    if (i2 || 2 === arguments.length)
      for (var e2, r2 = 0, a2 = t2.length; r2 < a2; r2++)
        !e2 && r2 in t2 || (e2 || (e2 = Array.prototype.slice.call(t2, 0, r2)), e2[r2] = t2[r2]);
    return n2.concat(e2 || Array.prototype.slice.call(t2));
  }
  function i(n2) {
    return Array.prototype.slice.call(n2);
  }
  function e(n2, t2) {
    var i2 = Math.floor(n2);
    return i2 === t2 || i2 + 1 === t2 ? n2 : t2;
  }
  function r() {
    return Date.now();
  }
  function a(n2, t2, i2) {
    if (t2 = "data-keen-slider-" + t2, null === i2)
      return n2.removeAttribute(t2);
    n2.setAttribute(t2, i2 || "");
  }
  function o(n2, t2) {
    return t2 = t2 || document, "function" == typeof n2 && (n2 = n2(t2)), Array.isArray(n2) ? n2 : "string" == typeof n2 ? i(t2.querySelectorAll(n2)) : n2 instanceof HTMLElement ? [n2] : n2 instanceof NodeList ? i(n2) : [];
  }
  function u(n2) {
    n2.raw && (n2 = n2.raw), n2.cancelable && !n2.defaultPrevented && n2.preventDefault();
  }
  function s(n2) {
    n2.raw && (n2 = n2.raw), n2.stopPropagation && n2.stopPropagation();
  }
  function c() {
    var n2 = [];
    return { add: function(t2, i2, e2, r2) {
      t2.addListener ? t2.addListener(e2) : t2.addEventListener(i2, e2, r2), n2.push([t2, i2, e2, r2]);
    }, input: function(n3, t2, i2, e2) {
      this.add(n3, t2, function(n4) {
        return function(t3) {
          t3.nativeEvent && (t3 = t3.nativeEvent);
          var i3 = t3.changedTouches || [], e3 = t3.targetTouches || [], r2 = t3.detail && t3.detail.x ? t3.detail : null;
          return n4({ id: r2 ? r2.identifier ? r2.identifier : "i" : e3[0] ? e3[0] ? e3[0].identifier : "e" : "d", idChanged: r2 ? r2.identifier ? r2.identifier : "i" : i3[0] ? i3[0] ? i3[0].identifier : "e" : "d", raw: t3, x: r2 && r2.x ? r2.x : e3[0] ? e3[0].screenX : r2 ? r2.x : t3.pageX, y: r2 && r2.y ? r2.y : e3[0] ? e3[0].screenY : r2 ? r2.y : t3.pageY });
        };
      }(i2), e2);
    }, purge: function() {
      n2.forEach(function(n3) {
        n3[0].removeListener ? n3[0].removeListener(n3[2]) : n3[0].removeEventListener(n3[1], n3[2], n3[3]);
      }), n2 = [];
    } };
  }
  function d(n2, t2, i2) {
    return Math.min(Math.max(n2, t2), i2);
  }
  function l(n2) {
    return (n2 > 0 ? 1 : 0) - (n2 < 0 ? 1 : 0) || +n2;
  }
  function f(n2) {
    var t2 = n2.getBoundingClientRect();
    return { height: e(t2.height, n2.offsetHeight), width: e(t2.width, n2.offsetWidth) };
  }
  function p(n2, t2, i2, e2) {
    var r2 = n2 && n2[t2];
    return null == r2 ? i2 : e2 && "function" == typeof r2 ? r2() : r2;
  }
  function v(n2) {
    return Math.round(1e6 * n2) / 1e6;
  }
  function h(n2) {
    var t2, i2, e2, r2, a2, o2;
    function u2(t3) {
      o2 || (o2 = t3), s2(true);
      var a3 = t3 - o2;
      a3 > e2 && (a3 = e2);
      var l3 = r2[i2];
      if (l3[3] < a3)
        return i2++, u2(t3);
      var f2 = l3[2], p2 = l3[4], v2 = l3[0], h2 = l3[1] * (0, l3[5])(0 === p2 ? 1 : (a3 - f2) / p2);
      if (h2 && n2.track.to(v2 + h2), a3 < e2)
        return d2();
      o2 = null, s2(false), c2(null), n2.emit("animationEnded");
    }
    function s2(n3) {
      t2.active = n3;
    }
    function c2(n3) {
      t2.targetIdx = n3;
    }
    function d2() {
      var n3;
      n3 = u2, a2 = window.requestAnimationFrame(n3);
    }
    function l2() {
      var t3;
      t3 = a2, window.cancelAnimationFrame(t3), s2(false), c2(null), o2 && n2.emit("animationStopped"), o2 = null;
    }
    return t2 = { active: false, start: function(t3) {
      if (l2(), n2.track.details) {
        var a3 = 0, o3 = n2.track.details.position;
        i2 = 0, e2 = 0, r2 = t3.map(function(n3) {
          var t4, i3 = o3, r3 = null !== (t4 = n3.earlyExit) && void 0 !== t4 ? t4 : n3.duration, u3 = n3.easing, s3 = n3.distance * u3(r3 / n3.duration) || 0;
          o3 += s3;
          var c3 = e2;
          return e2 += r3, a3 += s3, [i3, n3.distance, c3, e2, n3.duration, u3];
        }), c2(n2.track.distToIdx(a3)), d2(), n2.emit("animationStarted");
      }
    }, stop: l2, targetIdx: null };
  }
  function m(n2) {
    var i2, e2, a2, o2, u2, s2, c2, f2, h2, m2, g2, b2, x2, k2, y2 = 1 / 0, w = [], M = null, T = 0;
    function C(n3) {
      _(T + n3);
    }
    function E(n3) {
      var t2 = z(T + n3).abs;
      return D(t2) ? t2 : null;
    }
    function z(n3) {
      var i3 = Math.floor(Math.abs(v(n3 / e2))), r2 = v((n3 % e2 + e2) % e2);
      r2 === e2 && (r2 = 0);
      var a3 = l(n3), o3 = c2.indexOf(t([], c2, true).reduce(function(n4, t2) {
        return Math.abs(t2 - r2) < Math.abs(n4 - r2) ? t2 : n4;
      })), u3 = o3;
      return a3 < 0 && i3++, o3 === s2 && (u3 = 0, i3 += a3 > 0 ? 1 : -1), { abs: u3 + i3 * s2 * a3, origin: o3, rel: u3 };
    }
    function I(n3, t2, i3) {
      var e3;
      if (t2 || !S())
        return A(n3, i3);
      if (!D(n3))
        return null;
      var r2 = z(null != i3 ? i3 : T), a3 = r2.abs, o3 = n3 - r2.rel, u3 = a3 + o3;
      e3 = A(u3);
      var c3 = A(u3 - s2 * l(o3));
      return (null !== c3 && Math.abs(c3) < Math.abs(e3) || null === e3) && (e3 = c3), v(e3);
    }
    function A(n3, t2) {
      if (null == t2 && (t2 = v(T)), !D(n3) || null === n3)
        return null;
      n3 = Math.round(n3);
      var i3 = z(t2), r2 = i3.abs, a3 = i3.rel, o3 = i3.origin, u3 = O(n3), d2 = (t2 % e2 + e2) % e2, l2 = c2[o3], f3 = Math.floor((n3 - (r2 - a3)) / s2) * e2;
      return v(l2 - d2 - l2 + c2[u3] + f3 + (o3 === s2 ? e2 : 0));
    }
    function D(n3) {
      return L(n3) === n3;
    }
    function L(n3) {
      return d(n3, h2, m2);
    }
    function S() {
      return o2.loop;
    }
    function O(n3) {
      return (n3 % s2 + s2) % s2;
    }
    function _(t2) {
      var i3;
      i3 = t2 - T, w.push({ distance: i3, timestamp: r() }), w.length > 6 && (w = w.slice(-6)), T = v(t2);
      var e3 = H().abs;
      if (e3 !== M) {
        var a3 = null !== M;
        M = e3, a3 && n2.emit("slideChanged");
      }
    }
    function H(t2) {
      var r2 = t2 ? null : function() {
        if (s2) {
          var n3 = S(), t3 = n3 ? (T % e2 + e2) % e2 : T, i3 = (n3 ? T % e2 : T) - u2[0][2], r3 = 0 - (i3 < 0 && n3 ? e2 - Math.abs(i3) : i3), c3 = 0, d2 = z(T), f3 = d2.abs, p2 = d2.rel, v2 = u2[p2][2], y3 = u2.map(function(t4, i4) {
            var a3 = r3 + c3;
            (a3 < 0 - t4[0] || a3 > 1) && (a3 += (Math.abs(a3) > e2 - 1 && n3 ? e2 : 0) * l(-a3));
            var u3 = i4 - p2, d3 = l(u3), h3 = u3 + f3;
            n3 && (-1 === d3 && a3 > v2 && (h3 += s2), 1 === d3 && a3 < v2 && (h3 -= s2), null !== g2 && h3 < g2 && (a3 += e2), null !== b2 && h3 > b2 && (a3 -= e2));
            var m3 = a3 + t4[0] + t4[1], x3 = Math.max(a3 >= 0 && m3 <= 1 ? 1 : m3 < 0 || a3 > 1 ? 0 : a3 < 0 ? Math.min(1, (t4[0] + a3) / t4[0]) : (1 - a3) / t4[0], 0);
            return c3 += t4[0] + t4[1], { abs: h3, distance: o2.rtl ? -1 * a3 + 1 - t4[0] : a3, portion: x3, size: t4[0] };
          });
          return f3 = L(f3), p2 = O(f3), { abs: L(f3), length: a2, max: k2, maxIdx: m2, min: x2, minIdx: h2, position: T, progress: n3 ? t3 / e2 : T / a2, rel: p2, slides: y3, slidesLength: e2 };
        }
      }();
      return i2.details = r2, n2.emit("detailsChanged"), r2;
    }
    return i2 = { absToRel: O, add: C, details: null, distToIdx: E, idxToDist: I, init: function(t2) {
      if (function() {
        if (o2 = n2.options, u2 = (o2.trackConfig || []).map(function(n3) {
          return [p(n3, "size", 1), p(n3, "spacing", 0), p(n3, "origin", 0)];
        }), s2 = u2.length) {
          e2 = v(u2.reduce(function(n3, t4) {
            return n3 + t4[0] + t4[1];
          }, 0));
          var t3, i4 = s2 - 1;
          a2 = v(e2 + u2[0][2] - u2[i4][0] - u2[i4][2] - u2[i4][1]), c2 = u2.reduce(function(n3, i5) {
            if (!n3)
              return [0];
            var e3 = u2[n3.length - 1], r2 = n3[n3.length - 1] + (e3[0] + e3[2]) + e3[1];
            return r2 -= i5[2], n3[n3.length - 1] > r2 && (r2 = n3[n3.length - 1]), r2 = v(r2), n3.push(r2), (!t3 || t3 < r2) && (f2 = n3.length - 1), t3 = r2, n3;
          }, null), 0 === a2 && (f2 = 0), c2.push(v(e2));
        }
      }(), !s2)
        return H(true);
      var i3;
      !function() {
        var t3 = n2.options.range, i4 = n2.options.loop;
        g2 = h2 = i4 ? p(i4, "min", -1 / 0) : 0, b2 = m2 = i4 ? p(i4, "max", y2) : f2;
        var e3 = p(t3, "min", null), r2 = p(t3, "max", null);
        e3 && (h2 = e3), r2 && (m2 = r2), x2 = h2 === -1 / 0 ? h2 : n2.track.idxToDist(h2 || 0, true, 0), k2 = m2 === y2 ? m2 : I(m2, true, 0), null === r2 && (b2 = m2), p(t3, "align", false) && m2 !== y2 && 0 === u2[O(m2)][2] && (k2 -= 1 - u2[O(m2)][0], m2 = E(k2 - T)), x2 = v(x2), k2 = v(k2);
      }(), i3 = t2, Number(i3) === i3 ? C(A(L(t2))) : H();
    }, to: _, velocity: function() {
      var n3 = r(), t2 = w.reduce(function(t3, i3) {
        var e3 = i3.distance, r2 = i3.timestamp;
        return n3 - r2 > 200 || (l(e3) !== l(t3.distance) && t3.distance && (t3 = { distance: 0, lastTimestamp: 0, time: 0 }), t3.time && (t3.distance += e3), t3.lastTimestamp && (t3.time += r2 - t3.lastTimestamp), t3.lastTimestamp = r2), t3;
      }, { distance: 0, lastTimestamp: 0, time: 0 });
      return t2.distance / t2.time || 0;
    } };
  }
  function g(n2) {
    var t2, i2, e2, r2, a2, o2, u2, s2;
    function c2(n3) {
      return 2 * n3;
    }
    function f2(n3) {
      return d(n3, u2, s2);
    }
    function p2(n3) {
      return 1 - Math.pow(1 - n3, 3);
    }
    function v2() {
      return e2 ? n2.track.velocity() : 0;
    }
    function h2() {
      b2();
      var t3 = "free-snap" === n2.options.mode, i3 = n2.track, e3 = v2();
      r2 = l(e3);
      var u3 = n2.track.details, s3 = [];
      if (e3 || !t3) {
        var d2 = m2(e3), h3 = d2.dist, g3 = d2.dur;
        if (g3 = c2(g3), h3 *= r2, t3) {
          var x2 = i3.idxToDist(i3.distToIdx(h3), true);
          x2 && (h3 = x2);
        }
        s3.push({ distance: h3, duration: g3, easing: p2 });
        var k2 = u3.position, y2 = k2 + h3;
        if (y2 < a2 || y2 > o2) {
          var w = y2 < a2 ? a2 - k2 : o2 - k2, M = 0, T = e3;
          if (l(w) === r2) {
            var C = Math.min(Math.abs(w) / Math.abs(h3), 1), E = function(n3) {
              return 1 - Math.pow(1 - n3, 1 / 3);
            }(C) * g3;
            s3[0].earlyExit = E, T = e3 * (1 - C);
          } else
            s3[0].earlyExit = 0, M += w;
          var z = m2(T, 100), I = z.dist * r2;
          n2.options.rubberband && (s3.push({ distance: I, duration: c2(z.dur), easing: p2 }), s3.push({ distance: -I + M, duration: 500, easing: p2 }));
        }
        n2.animator.start(s3);
      } else
        n2.moveToIdx(f2(u3.abs), true, { duration: 500, easing: function(n3) {
          return 1 + --n3 * n3 * n3 * n3 * n3;
        } });
    }
    function m2(n3, t3) {
      void 0 === t3 && (t3 = 1e3);
      var i3 = 147e-9 + (n3 = Math.abs(n3)) / t3;
      return { dist: Math.pow(n3, 2) / i3, dur: n3 / i3 };
    }
    function g2() {
      var t3 = n2.track.details;
      t3 && (a2 = t3.min, o2 = t3.max, u2 = t3.minIdx, s2 = t3.maxIdx);
    }
    function b2() {
      n2.animator.stop();
    }
    n2.on("updated", g2), n2.on("optionsChanged", g2), n2.on("created", g2), n2.on("dragStarted", function() {
      e2 = false, b2(), t2 = i2 = n2.track.details.abs;
    }), n2.on("dragChecked", function() {
      e2 = true;
    }), n2.on("dragEnded", function() {
      var e3 = n2.options.mode;
      "snap" === e3 && function() {
        var e4 = n2.track, r3 = n2.track.details, u3 = r3.position, s3 = l(v2());
        (u3 > o2 || u3 < a2) && (s3 = 0);
        var c3 = t2 + s3;
        0 === r3.slides[e4.absToRel(c3)].portion && (c3 -= s3), t2 !== i2 && (c3 = i2), l(e4.idxToDist(c3, true)) !== s3 && (c3 += s3), c3 = f2(c3);
        var d2 = e4.idxToDist(c3, true);
        n2.animator.start([{ distance: d2, duration: 500, easing: function(n3) {
          return 1 + --n3 * n3 * n3 * n3 * n3;
        } }]);
      }(), "free" !== e3 && "free-snap" !== e3 || h2();
    }), n2.on("dragged", function() {
      i2 = n2.track.details.abs;
    });
  }
  function b(n2) {
    var t2, i2, e2, r2, a2, f2, p2, v2, h2, m2, g2, b2, x2, k2, y2, w, M, T, C = c();
    function E(t3) {
      if (f2 && v2 === t3.id) {
        var o2 = D(t3);
        if (h2) {
          if (!A(t3))
            return I(t3);
          m2 = o2, h2 = false, n2.emit("dragChecked");
        }
        if (w)
          return m2 = o2;
        u(t3);
        var c2 = function(t4) {
          if (M === -1 / 0 && T === 1 / 0)
            return t4;
          var e3 = n2.track.details, o3 = e3.length, u2 = e3.position, s2 = d(t4, M - u2, T - u2);
          if (0 === o3)
            return 0;
          if (!n2.options.rubberband)
            return s2;
          if (u2 <= T && u2 >= M)
            return t4;
          if (u2 < M && i2 > 0 || u2 > T && i2 < 0)
            return t4;
          var c3 = (u2 < M ? u2 - M : u2 - T) / o3, l2 = r2 * o3, f3 = Math.abs(c3 * l2), p3 = Math.max(0, 1 - f3 / a2 * 2);
          return p3 * p3 * t4;
        }(p2(m2 - o2) / r2 * e2);
        i2 = l(c2);
        var x3 = n2.track.details.position;
        (x3 > M && x3 < T || x3 === M && i2 > 0 || x3 === T && i2 < 0) && s(t3), g2 += c2, !b2 && Math.abs(g2 * r2) > 5 && (b2 = true), n2.track.add(c2), m2 = o2, n2.emit("dragged");
      }
    }
    function z(t3) {
      !f2 && n2.track.details && n2.track.details.length && (g2 = 0, f2 = true, b2 = false, h2 = true, v2 = t3.id, A(t3), m2 = D(t3), n2.emit("dragStarted"));
    }
    function I(t3) {
      f2 && v2 === t3.idChanged && (f2 = false, n2.emit("dragEnded"));
    }
    function A(n3) {
      var t3 = L(), i3 = t3 ? n3.y : n3.x, e3 = t3 ? n3.x : n3.y, r3 = void 0 !== x2 && void 0 !== k2 && Math.abs(k2 - e3) <= Math.abs(x2 - i3);
      return x2 = i3, k2 = e3, r3;
    }
    function D(n3) {
      return L() ? n3.y : n3.x;
    }
    function L() {
      return n2.options.vertical;
    }
    function S() {
      r2 = n2.size, a2 = L() ? window.innerHeight : window.innerWidth;
      var t3 = n2.track.details;
      t3 && (M = t3.min, T = t3.max);
    }
    function O(n3) {
      b2 && (s(n3), u(n3));
    }
    function _() {
      if (C.purge(), n2.options.drag && !n2.options.disabled) {
        var i3;
        i3 = n2.options.dragSpeed || 1, p2 = "function" == typeof i3 ? i3 : function(n3) {
          return n3 * i3;
        }, e2 = n2.options.rtl ? -1 : 1, S(), t2 = n2.container, function() {
          var n3 = "data-keen-slider-clickable";
          o("[".concat(n3, "]:not([").concat(n3, "=false])"), t2).map(function(n4) {
            C.add(n4, "dragstart", s), C.add(n4, "mousedown", s), C.add(n4, "touchstart", s);
          });
        }(), C.add(t2, "dragstart", function(n3) {
          u(n3);
        }), C.add(t2, "click", O, { capture: true }), C.input(t2, "ksDragStart", z), C.input(t2, "ksDrag", E), C.input(t2, "ksDragEnd", I), C.input(t2, "mousedown", z), C.input(t2, "mousemove", E), C.input(t2, "mouseleave", I), C.input(t2, "mouseup", I), C.input(t2, "touchstart", z, { passive: true }), C.input(t2, "touchmove", E, { passive: false }), C.input(t2, "touchend", I), C.input(t2, "touchcancel", I), C.add(window, "wheel", function(n3) {
          f2 && u(n3);
        });
        var r3 = "data-keen-slider-scrollable";
        o("[".concat(r3, "]:not([").concat(r3, "=false])"), n2.container).map(function(n3) {
          return function(n4) {
            var t3;
            C.input(n4, "touchstart", function(n5) {
              t3 = D(n5), w = true, y2 = true;
            }, { passive: true }), C.input(n4, "touchmove", function(i4) {
              var e3 = L(), r4 = e3 ? n4.scrollHeight - n4.clientHeight : n4.scrollWidth - n4.clientWidth, a3 = t3 - D(i4), o2 = e3 ? n4.scrollTop : n4.scrollLeft, s2 = e3 && "scroll" === n4.style.overflowY || !e3 && "scroll" === n4.style.overflowX;
              if (t3 = D(i4), (a3 < 0 && o2 > 0 || a3 > 0 && o2 < r4) && y2 && s2)
                return w = true;
              y2 = false, u(i4), w = false;
            }), C.input(n4, "touchend", function() {
              w = false;
            });
          }(n3);
        });
      }
    }
    n2.on("updated", S), n2.on("optionsChanged", _), n2.on("created", _), n2.on("destroyed", C.purge);
  }
  function x(n2) {
    var t2, i2, e2 = null;
    function r2(t3, i3, e3) {
      n2.animator.active ? o2(t3, i3, e3) : requestAnimationFrame(function() {
        return o2(t3, i3, e3);
      });
    }
    function a2() {
      r2(false, false, i2);
    }
    function o2(i3, r3, a3) {
      var o3 = 0, u3 = n2.size, d3 = n2.track.details;
      if (d3 && t2) {
        var l3 = d3.slides;
        t2.forEach(function(n3, t3) {
          if (i3)
            !e2 && r3 && s2(n3, null, a3), c2(n3, null, a3);
          else {
            if (!l3[t3])
              return;
            var d4 = l3[t3].size * u3;
            !e2 && r3 && s2(n3, d4, a3), c2(n3, l3[t3].distance * u3 - o3, a3), o3 += d4;
          }
        });
      }
    }
    function u2(t3) {
      return "performance" === n2.options.renderMode ? Math.round(t3) : t3;
    }
    function s2(n3, t3, i3) {
      var e3 = i3 ? "height" : "width";
      null !== t3 && (t3 = u2(t3) + "px"), n3.style["min-" + e3] = t3, n3.style["max-" + e3] = t3;
    }
    function c2(n3, t3, i3) {
      if (null !== t3) {
        t3 = u2(t3);
        var e3 = i3 ? t3 : 0;
        t3 = "translate3d(".concat(i3 ? 0 : t3, "px, ").concat(e3, "px, 0)");
      }
      n3.style.transform = t3, n3.style["-webkit-transform"] = t3;
    }
    function d2() {
      t2 && (o2(true, true, i2), t2 = null), n2.on("detailsChanged", a2, true);
    }
    function l2() {
      r2(false, true, i2);
    }
    function f2() {
      d2(), i2 = n2.options.vertical, n2.options.disabled || "custom" === n2.options.renderMode || (e2 = "auto" === p(n2.options.slides, "perView", null), n2.on("detailsChanged", a2), (t2 = n2.slides).length && l2());
    }
    n2.on("created", f2), n2.on("optionsChanged", f2), n2.on("beforeOptionsChanged", function() {
      d2();
    }), n2.on("updated", l2), n2.on("destroyed", d2);
  }
  function k(t2, i2) {
    return function(e2) {
      var r2, u2, s2, d2, l2, v2, h2 = c();
      function m2(n2) {
        var t3;
        a(e2.container, "reverse", "rtl" !== (t3 = e2.container, window.getComputedStyle(t3, null).getPropertyValue("direction")) || n2 ? null : ""), a(e2.container, "v", e2.options.vertical && !n2 ? "" : null), a(e2.container, "disabled", e2.options.disabled && !n2 ? "" : null);
      }
      function g2() {
        b2() && M();
      }
      function b2() {
        var t3 = null;
        if (d2.forEach(function(n2) {
          n2.matches && (t3 = n2.__media);
        }), t3 === r2)
          return false;
        r2 || e2.emit("beforeOptionsChanged"), r2 = t3;
        var i3 = t3 ? s2.breakpoints[t3] : s2;
        return e2.options = n(n({}, s2), i3), m2(), I(), A(), C(), true;
      }
      function x2(n2) {
        var t3 = f(n2);
        return (e2.options.vertical ? t3.height : t3.width) / e2.size || 1;
      }
      function k2() {
        return e2.options.trackConfig.length;
      }
      function y2(t3) {
        for (var a2 in r2 = false, s2 = n(n({}, i2), t3), h2.purge(), u2 = e2.size, d2 = [], s2.breakpoints || []) {
          var o2 = window.matchMedia(a2);
          o2.__media = a2, d2.push(o2), h2.add(o2, "change", g2);
        }
        h2.add(window, "orientationchange", z), h2.add(window, "resize", E), b2();
      }
      function w(n2) {
        e2.animator.stop();
        var t3 = e2.track.details;
        e2.track.init(null != n2 ? n2 : t3 ? t3.abs : 0);
      }
      function M(n2) {
        w(n2), e2.emit("optionsChanged");
      }
      function T(n2, t3) {
        if (n2)
          return y2(n2), void M(t3);
        I(), A();
        var i3 = k2();
        C(), k2() !== i3 ? M(t3) : w(t3), e2.emit("updated");
      }
      function C() {
        var n2 = e2.options.slides;
        if ("function" == typeof n2)
          return e2.options.trackConfig = n2(e2.size, e2.slides);
        for (var t3 = e2.slides, i3 = t3.length, r3 = "number" == typeof n2 ? n2 : p(n2, "number", i3, true), a2 = [], o2 = p(n2, "perView", 1, true), u3 = p(n2, "spacing", 0, true) / e2.size || 0, s3 = "auto" === o2 ? u3 : u3 / o2, c2 = p(n2, "origin", "auto"), d3 = 0, l3 = 0; l3 < r3; l3++) {
          var f2 = "auto" === o2 ? x2(t3[l3]) : 1 / o2 - u3 + s3, v3 = "center" === c2 ? 0.5 - f2 / 2 : "auto" === c2 ? 0 : c2;
          a2.push({ origin: v3, size: f2, spacing: u3 }), d3 += f2;
        }
        if (d3 += u3 * (r3 - 1), "auto" === c2 && !e2.options.loop && 1 !== o2) {
          var h3 = 0;
          a2.map(function(n3) {
            var t4 = d3 - h3;
            return h3 += n3.size + u3, t4 >= 1 || (n3.origin = 1 - t4 - (d3 > 1 ? 0 : 1 - d3)), n3;
          });
        }
        e2.options.trackConfig = a2;
      }
      function E() {
        I();
        var n2 = e2.size;
        e2.options.disabled || n2 === u2 || (u2 = n2, T());
      }
      function z() {
        E(), setTimeout(E, 500), setTimeout(E, 2e3);
      }
      function I() {
        var n2 = f(e2.container);
        e2.size = (e2.options.vertical ? n2.height : n2.width) || 1;
      }
      function A() {
        e2.slides = o(e2.options.selector, e2.container);
      }
      e2.container = (v2 = o(t2, l2 || document)).length ? v2[0] : null, e2.destroy = function() {
        h2.purge(), e2.emit("destroyed"), m2(true);
      }, e2.prev = function() {
        e2.moveToIdx(e2.track.details.abs - 1, true);
      }, e2.next = function() {
        e2.moveToIdx(e2.track.details.abs + 1, true);
      }, e2.update = T, y2(e2.options);
    };
  }
  var y = function(n2, i2, e2) {
    try {
      return function(n3, t2) {
        var i3, e3 = {};
        return i3 = { emit: function(n4) {
          e3[n4] && e3[n4].forEach(function(n5) {
            n5(i3);
          });
          var t3 = i3.options && i3.options[n4];
          t3 && t3(i3);
        }, moveToIdx: function(n4, t3, e4) {
          var r2 = i3.track.idxToDist(n4, t3);
          if (r2) {
            var a2 = i3.options.defaultAnimation;
            i3.animator.start([{ distance: r2, duration: p(e4 || a2, "duration", 500), easing: p(e4 || a2, "easing", function(n5) {
              return 1 + --n5 * n5 * n5 * n5 * n5;
            }) }]);
          }
        }, on: function(n4, t3, i4) {
          void 0 === i4 && (i4 = false), e3[n4] || (e3[n4] = []);
          var r2 = e3[n4].indexOf(t3);
          r2 > -1 ? i4 && delete e3[n4][r2] : i4 || e3[n4].push(t3);
        }, options: n3 }, function() {
          if (i3.track = m(i3), i3.animator = h(i3), t2)
            for (var n4 = 0, e4 = t2; n4 < e4.length; n4++)
              (0, e4[n4])(i3);
          i3.track.init(i3.options.initial || 0), i3.emit("created");
        }(), i3;
      }(i2, t([k(n2, { drag: true, mode: "snap", renderMode: "precision", rubberband: true, selector: ".keen-slider__slide" }), x, b, g], e2 || [], true));
    } catch (n3) {
      console.error(n3);
    }
  };

  // resources/ts/utilities/boolean.ts
  var trulyValues = [1, "1", true, "true", "on", "yes"];
  var falsyValues = [0, "0", false, "false", "off", "no"];
  function isBoolean(value) {
    return trulyValues.indexOf(value) >= 0 || falsyValues.indexOf(value) >= 0;
  }
  function makeBoolean(value, defaultValue = false) {
    if (trulyValues.indexOf(value) >= 0) {
      return true;
    } else if (falsyValues.indexOf(value) >= 0) {
      return false;
    } else {
      return defaultValue;
    }
  }

  // resources/ts/utilities/json.ts
  function parseJson(data) {
    let parser = JSON.parse;
    if (typeof window["ocJSON"] === "function") {
      parser = window["ocJSON"];
    } else if (typeof (window["oc"] || {}).parseJSON === "function") {
      parser = typeof (window["oc"] || {}).parseJSON;
    }
    let result = null;
    try {
      let temp = parser(data);
      if (temp && typeof temp === "object") {
        result = temp;
      }
    } catch (e2) {
    }
    return result;
  }
  var json_default = parseJson;

  // resources/ts/components/keen-slider.ts
  var _KeenSliderNewsHub = class {
    static getInstance(element) {
      if (this.instances.has(element)) {
        return this.instances.get(element);
      } else {
        throw new Error("The passed HTMLElement has not been initialized yet.");
      }
    }
    static getOrCreateInstance(element, options = {}) {
      if (this.instances.has(element)) {
        return this.instances.get(element);
      } else {
        return new this(element, options);
      }
    }
    constructor(element, options = {}) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
      if (_KeenSliderNewsHub.instances.has(element)) {
        throw new Error("The passed HTMLElement has already been initialized.");
      }
      _KeenSliderNewsHub.instances.set(element, this);
      this.root = element;
      this.config = Object.assign({}, _KeenSliderNewsHub.defaults, options);
      let keenSliderOptions = Object.assign({}, this.config.keenSlider);
      let keenSliderPlugins = [];
      if (this.config.amount) {
        if (typeof keenSliderOptions.slides === "number") {
          keenSliderOptions.slides = {
            perView: keenSliderOptions.slides
          };
        }
        if (typeof keenSliderOptions.slides === "undefined" || typeof keenSliderOptions.slides === "object") {
          (_a = keenSliderOptions.slides) != null ? _a : keenSliderOptions.slides = {};
          (_c = (_b = keenSliderOptions.slides).perView) != null ? _c : _b.perView = this.config.amount;
          (_e = (_d = keenSliderOptions.slides).spacing) != null ? _e : _d.spacing = this.config.spacing;
        }
      }
      keenSliderOptions = this.forceResponsiveBreakpoints(keenSliderOptions);
      switch (this.config.animation) {
        case "fade":
          keenSliderPlugins.push(this.pluginFade.bind(this));
          keenSliderOptions.renderMode = "custom";
          break;
        case "zoom":
          keenSliderPlugins.push(this.pluginZoom.bind(this));
          break;
        case "marquee":
          keenSliderPlugins.push(this.pluginMarquee.bind(this));
          keenSliderOptions.drag = false;
          keenSliderOptions.loop = true;
          keenSliderOptions.renderMode = "performance";
          if (typeof keenSliderOptions.breakpoints !== "undefined") {
            for (let key in keenSliderOptions.breakpoints) {
              keenSliderOptions.breakpoints[key].loop = true;
            }
          }
          break;
        default:
          (_f = keenSliderOptions.defaultAnimation) != null ? _f : keenSliderOptions.defaultAnimation = {};
          (_h = (_g = keenSliderOptions.defaultAnimation).duration) != null ? _h : _g.duration = this.config.interval;
          break;
      }
      if (this.config.autoplay && this.config.animation !== "marquee") {
        keenSliderPlugins.push(this.pluginAutoplay.bind(this));
      }
      if (this.config.loop && this.config.animation !== "marquee") {
        (_i = keenSliderOptions.loop) != null ? _i : keenSliderOptions.loop = this.config.loop;
      }
      if (this.config.touch && this.config.animation !== "marquee") {
        (_j = keenSliderOptions.drag) != null ? _j : keenSliderOptions.drag = this.config.touch;
      }
      if (this.config.controls) {
        keenSliderPlugins.push(this.pluginControls.bind(this));
      }
      if (this.config.indicators) {
        keenSliderPlugins.push(this.pluginIndicators.bind(this));
      }
      if (typeof keenSliderOptions.selector === "undefined") {
        keenSliderOptions.selector = ".keen-slider-slide";
      }
      let className = `keen-slider-${this.config.animation}`;
      if (!this.root.classList.contains(className)) {
        this.root.classList.add(className);
      }
      this.slider = new y(this.root, keenSliderOptions, keenSliderPlugins);
    }
    slideTo(direction) {
      if (direction === "next") {
        this.slider.next();
      } else if (direction === "previous" || direction === "prev") {
        this.slider.prev();
      } else {
        let idx = typeof direction === "string" ? parseInt(direction) : direction;
        let per = typeof this.slider.options.slides === "object" ? this.slider.options.slides.perView : 1;
        let len = this.slider.track.details.slides.length;
        if (per === 1) {
          this.slider.moveToIdx(idx);
        } else {
          if (idx * per >= len - 1) {
            this.slider.moveToIdx(len - per);
          } else {
            this.slider.moveToIdx(idx * per);
          }
        }
      }
    }
    forceResponsiveBreakpoints(keenSliderOptions) {
      var _a, _b;
      if (typeof keenSliderOptions.slides !== "object") {
        return keenSliderOptions;
      }
      let slides = (_a = keenSliderOptions.slides.perView) != null ? _a : 1;
      let spacing = (_b = keenSliderOptions.slides.spacing) != null ? _b : 30;
      if (typeof slides !== "number" || slides <= 1) {
        return keenSliderOptions;
      }
      let breakpoints = {
        "(min-width: 768px)": {
          slides: {
            perView: slides <= 5 ? Math.max(slides - 2, 1) : Math.floor(slides / 3),
            spacing: typeof spacing === "number" ? spacing * 0.5 : spacing
          }
        },
        "(min-width: 1024px)": {
          slides: {
            perView: slides <= 5 ? Math.max(slides - 1, 1) : Math.floor(slides / 2),
            spacing: typeof spacing === "number" ? spacing * 0.75 : spacing
          }
        },
        "(min-width: 1400px)": {
          slides: {
            perView: slides,
            spacing
          }
        }
      };
      keenSliderOptions.breakpoints = breakpoints;
      keenSliderOptions.slides.perView = 1;
      keenSliderOptions.slides.spacing = 0;
      return keenSliderOptions;
    }
    pluginAutoplay(slider) {
      let timeout;
      let mouseOver = false;
      const clearNextTimeout = () => {
        clearTimeout(timeout);
      };
      const nextTimeout = (slider2) => {
        clearNextTimeout();
        if (mouseOver) {
          return;
        }
        timeout = setTimeout(slider2.next, this.config.interval);
      };
      slider.on("created", (slider2) => {
        slider2.container.addEventListener("mouseover", () => {
          mouseOver = true;
          clearNextTimeout();
        });
        slider2.container.addEventListener("mouseout", () => {
          mouseOver = false;
          nextTimeout(slider2);
        });
        nextTimeout(slider2);
      });
      slider.on("dragStarted", clearNextTimeout);
      slider.on("animationEnded", nextTimeout);
      slider.on("updated", nextTimeout);
    }
    pluginFade(slider) {
      slider.on("detailsChanged", (slider2) => {
        slider2.slides.forEach((element, idx) => {
          element.style.opacity = `${slider2.track.details.slides[idx].portion}`;
        });
      });
    }
    pluginZoom(slider) {
      const scaleElement = (element, portion) => {
        let scale_size = 0.7;
        let scale = 1 - (scale_size - scale_size * portion);
        let style = `scale(${scale})`;
        element.style.transform = `${style}`;
        element.style["-webkit-transform"] = `${style}`;
      };
      slider.on("detailsChanged", (slider2) => {
        const slides = slider2.track.details.slides;
        slider2.slides.forEach((element, idx) => {
          scaleElement(element.querySelector(".slide-image"), slides[idx].portion);
          scaleElement(element.querySelector(".slide-content"), slides[idx].portion);
        });
      });
    }
    pluginMarquee(slider) {
      let animation = {
        duration: this.config.interval,
        easing: (t2) => t2
      };
      let amount = slider.slides.length - 1;
      slider.on("created", (s2) => {
        s2.moveToIdx(amount, true, animation);
        slider.container.addEventListener("mouseover", () => {
          slider.animator.stop();
        });
        slider.container.addEventListener("mouseout", () => {
          slider.moveToIdx(slider.track.details.abs + amount, true, animation);
        });
      });
      slider.on("animationEnded", (s2) => {
        slider.animator.stop();
        slider.moveToIdx(slider.track.details.abs + amount, true, animation);
      });
      slider.on("updated", (s2) => {
        slider.animator.stop();
        slider.moveToIdx(slider.track.details.abs + amount, true, animation);
      });
    }
    pluginIndicators(slider) {
      let custom = typeof this.config.controls === "string";
      let indicators = custom ? query_default(this.config.controls, this.root.parentElement) : [];
      const createIndicators = ((slider2) => {
        let len = slider2.slides.length;
        let abs = slider2.track.details.abs;
        let per = typeof slider2.options.slides === "object" ? slider2.options.slides.perView : 1;
        let num = Math.ceil(len / per);
        for (let i2 = 0; i2 < num; i2++) {
          let btn = document.createElement("BUTTON");
          btn.type = "button";
          btn.className = `keen-slider-indicator indicator-${i2}`;
          btn.dataset.slideTo = i2.toString();
          indicators.push(btn);
        }
        let buttons = document.createElement("DIV");
        buttons.className = "keen-slider-indicators";
        buttons.append(...indicators);
        this.root.appendChild(buttons);
      }).bind(this);
      const updateIndicators = ((slider2) => {
        if (!indicators || indicators.length === 0) {
          return;
        }
        let len = slider2.slides.length;
        let abs = slider2.track.details.abs;
        let per = typeof slider2.options.slides === "object" ? slider2.options.slides.perView : 1;
        let num = per === 1 ? abs : Math.floor(abs / per);
        if (per > 1) {
          if (abs + per === len && num < Math.ceil(len / per) - 1) {
            num++;
          }
        }
        indicators.map((el, idx) => {
          if (idx === num) {
            el.classList.add("current");
          } else {
            el.classList.remove("current");
          }
        });
      }).bind(this);
      const removeIndicators = ((slider2) => {
        if (!indicators || indicators.length === 0) {
          return;
        }
        let buttons = indicators[0].parentElement;
        if (buttons && buttons.parentElement) {
          buttons.remove();
          indicators = [];
        }
      }).bind(this);
      slider.on("created", (slider2) => {
        if (!custom) {
          createIndicators(slider2);
        }
        indicators.map((el) => {
          el.addEventListener("click", (ev) => {
            let pos = el.dataset.slideTo || el.dataset.keenSliderIndicator;
            ev.preventDefault();
            this.slideTo(pos);
          });
        });
        updateIndicators(slider2);
      });
      slider.on("optionsChanged", (slider2) => {
        updateIndicators(slider2);
      });
      slider.on("slideChanged", (slider2) => {
        updateIndicators(slider2);
      });
      slider.on("destroyed", (slider2) => {
        if (!custom) {
          removeIndicators(slider2);
        }
      });
    }
    pluginControls(slider) {
      let custom = typeof this.config.controls === "string";
      let controls = custom ? query_default(this.config.controls, this.root.parentElement) : [];
      const createControls = ((slider2) => {
        controls = ["prev", "next"].map((type) => {
          let btn = document.createElement("BUTTON");
          btn.type = "button";
          btn.className = `keen-slider-control control-${type}`;
          btn.dataset.slideTo = type;
          return btn;
        });
        let buttons = document.createElement("DIV");
        buttons.className = "keen-slider-controls";
        buttons.append(...controls);
        this.root.appendChild(buttons);
      }).bind(this);
      const updateControls = ((slider2) => {
        if (!controls || controls.length === 0) {
          return;
        }
        let disable = (el) => {
          if (el instanceof HTMLButtonElement) {
            el.disabled = true;
          }
          el.classList.add("disabled");
        };
        let enable = (el) => {
          if (el instanceof HTMLButtonElement) {
            el.disabled = false;
          }
          el.classList.remove("disabled");
        };
        controls.map((control) => {
          if (slider2.options.loop) {
            enable(control);
          } else {
            let abs = slider2.track.details.abs;
            let len = slider2.track.details.slides.length;
            let per = typeof slider2.options.slides === "object" ? slider2.options.slides.perView : 1;
            let pos = control.dataset.slideTo || control.dataset.keenSliderControl;
            if (pos === "prev" || pos === "previous") {
              abs === 0 ? disable(control) : enable(control);
            } else if (pos === "next") {
              abs + per >= len ? disable(control) : enable(control);
            }
          }
        });
      }).bind(this);
      const removeControls = ((slider2) => {
        if (!controls || controls.length === 0) {
          return;
        }
        let buttons = controls[0].parentElement;
        if (buttons && buttons.parentElement) {
          buttons.remove();
          controls = [];
        }
      }).bind(this);
      let nextSlide = this.slideTo.bind(this, "next");
      let prevSlide = this.slideTo.bind(this, "prev");
      slider.on("created", (slider2) => {
        if (!custom) {
          createControls(slider2);
        }
        controls.map((el) => {
          let pos = el.dataset.slideTo || el.dataset.keenSliderControl;
          if (pos === "prev" || pos === "previous") {
            el.addEventListener("click", prevSlide);
          } else if (pos === "next") {
            el.addEventListener("click", nextSlide);
          }
        });
        updateControls(slider2);
      });
      slider.on("optionsChanged", (slider2) => {
        updateControls(slider2);
      });
      slider.on("slideChanged", (slider2) => {
        updateControls(slider2);
      });
      slider.on("destroyed", (slider2) => {
        if (!custom) {
          removeControls(slider2);
        } else {
          controls.map((el) => {
            let pos = el.dataset.slideTo || el.dataset.keenSliderControl;
            if (pos === "prev" || pos === "previous") {
              el.removeEventListener("click", prevSlide);
            } else if (pos === "next") {
              el.removeEventListener("click", nextSlide);
            }
          });
        }
      });
    }
  };
  var KeenSliderNewsHub = _KeenSliderNewsHub;
  KeenSliderNewsHub.defaults = {
    amount: 1,
    animation: "slide",
    autoplay: false,
    controls: false,
    interval: 2002,
    indicators: false,
    loop: true,
    spacing: 30,
    touch: true,
    keenSlider: {}
  };
  KeenSliderNewsHub.instances = /* @__PURE__ */ new Map();
  async function invokeKeenSlider() {
    await ready_default();
    query_default("[data-keen-slider]").map((el) => {
      let config = json_default(el.dataset.keenSlider.trim()) || {};
      for (let [key, defaultValue] of Object.entries(KeenSliderNewsHub.defaults)) {
        if (!el.hasAttribute(`data-keen-slider-${key}`)) {
          continue;
        }
        let value = el.getAttribute(`data-keen-slider-${key}`);
        if (key === "autoplay" || key === "loop" || key === "touch") {
          value = makeBoolean(value, defaultValue);
        }
        if (key === "controls" || key === "indicators") {
          value = isBoolean(value) ? makeBoolean(value) : value;
        }
        if (key === "interval") {
          if (typeof value === "string" && value.endsWith("s")) {
            value = parseInt(value.slice(0, -1)) * 1e3;
          }
        }
        if (key === "amount" || key === "interval" || key === "spacing") {
          value = parseInt(value);
        }
        config[key] = value;
      }
      KeenSliderNewsHub.getOrCreateInstance(el, config);
    });
  }
  var keen_slider_default = invokeKeenSlider;

  // resources/ts/components/lightbox.ts
  function invokeLightbox(element) {
    element.addEventListener("click", (event) => {
      event.preventDefault();
      let lightbox = new Lightbox(element, {
        keyboard: true
      });
      lightbox.carouselElement.classList.add("slide");
      lightbox.show();
    });
  }
  var lightbox_default = () => {
    ready_default(() => {
      query_default('[data-newshub-toggle="lightbox"]').map((el) => invokeLightbox(el));
      query_default(".post-lightbox").map((el) => {
        el.dataset.gallery = "post-gallery";
        el.dataset.caption = el.querySelector("img").alt;
        invokeLightbox(el);
      });
    });
  };

  // resources/ts/utilities/wait.ts
  function wait(ms) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve(true);
      }, ms);
    });
  }
  var wait_default = wait;

  // resources/ts/components/navbar.ts
  var _Navbar = class {
    constructor(el) {
      this.frozen = false;
      this.scrolled = false;
      this.scrolledAnimationId = null;
      this.scrolledLast = 0;
      if (_Navbar.hasInstance(el)) {
        throw new Error("A Navbar instance has already been initialized for the passed element.");
      }
      _Navbar.instances.set(el, this);
      this.root = el;
      this.style = "static";
      if (el.classList.contains("header-sticky")) {
        this.style = "sticky";
        window.addEventListener("scroll", this.stickyNavbar.bind(this));
        setTimeout(() => {
          this.stickyNavbar(null);
        }, 150);
      }
      if (el.classList.contains("header-slide")) {
        this.style = "slide";
        this.scrolledLast = window.pageYOffset ? window.pageYOffset : (document.documentElement || document.body).scrollTop;
        let mainNavbar = this.root.querySelector(".navbar-main");
        let size = 0 + (mainNavbar.classList.contains("with-meta-menu") ? 1 : 0) + (mainNavbar.classList.contains("with-social-menu") ? 1 : 0);
        this.root.classList.add(size == 1 ? "medium" : size === 2 ? "large" : "small");
        setTimeout(() => {
          window.addEventListener("scroll", this.slideNavbar.bind(this), {
            passive: true,
            capture: false
          });
          this.slideNavbarUpdate();
        }, 150);
      }
      let toggler = this.root.querySelector(".navbar-toggler");
      if (toggler) {
        this.toggler = toggler;
        this.toggler.addEventListener("click", this.toggleMenu.bind(this));
      }
      let actionToggler = this.root.querySelector(".navbar-action-toggler");
      if (actionToggler) {
        this.actionToggler = actionToggler;
        this.actionToggler.addEventListener("click", this.toggleActions.bind(this));
      }
      Array.from(this.root.querySelectorAll(".navbar-subnav-toggler")).map((el2) => {
        el2.addEventListener("click", this.toggleSubMenu.bind(this, el2));
      });
      Array.from(this.root.querySelectorAll(".nav-title")).map((el2) => {
        let toggler2 = el2.parentElement.querySelector(".navbar-subnav-toggler");
        if (toggler2) {
          el2.addEventListener("click", this.toggleSubMenu.bind(this, toggler2));
        }
      });
      window.addEventListener("resize", this.onResize.bind(this), {
        passive: true,
        capture: false
      });
      document.addEventListener("click", this.onClickOutside.bind(this), {
        passive: true,
        capture: false
      });
    }
    static getInstance(el) {
      if (!this.instances.has(el)) {
        throw new Error("The passed element has not bee initialized yet.");
      } else {
        return this.instances.get(el);
      }
    }
    static hasInstance(el) {
      return this.instances.has(el);
    }
    determineHeight(element, parent) {
      let clone = element.cloneNode(true);
      clone.style.height = "auto";
      clone.style.minHeight = "none";
      clone.style.overflow = "visible";
      clone.style.position = "absolute";
      clone.style.visibility = "hidden";
      clone.style.opacity = 0;
      parent.appendChild(clone);
      const height = clone.offsetHeight;
      parent.removeChild(clone);
      return height;
    }
    stickyNavbar(event) {
      if (this.frozen) {
        return;
      }
      if (window.scrollY > 50) {
        this.root.classList.add("header-scroll");
      } else if (window.scrollY === 0) {
        this.root.classList.remove("header-scroll");
      }
    }
    slideNavbar(event) {
      if (!this.scrolled) {
        this.scrolled = true;
        this.scrolledAnimationId = requestAnimationFrame(this.slideNavbarUpdate.bind(this));
      }
    }
    slideNavbarUpdate() {
      let html = document.documentElement;
      let body = document.body;
      let scrollY = Math.round(window.pageYOffset ? window.pageYOffset : (html || body).scrollTop);
      let height = window.innerHeight || html.clientHeight || body.clientHeight;
      let scrollHeight = Math.max(
        body.scrollHeight,
        html.scrollHeight,
        body.offsetHeight,
        html.offsetHeight,
        body.clientHeight,
        html.clientHeight
      );
      let direction = scrollY > this.scrolledLast ? "down" : "up";
      let distance = Math.abs(scrollY - this.scrolledLast);
      let isOutOfBounds = scrollY < 0 || scrollY + height > scrollHeight;
      let top = scrollY <= 0;
      let bottom = scrollY + height >= scrollHeight;
      let toleranceExceeded = distance > 0;
      (() => {
        if (isOutOfBounds) {
          return;
        }
        if (this.frozen) {
          return;
        }
        if (top && !this.root.classList.contains("header-top")) {
          this.root.classList.add("header-top");
        } else if (!top && this.root.classList.contains("header-top")) {
          this.root.classList.remove("header-top");
        }
        if (bottom && !this.root.classList.contains("header-bottom")) {
          this.root.classList.add("header-bottom");
        } else if (!bottom && this.root.classList.contains("header-bottom")) {
          this.root.classList.remove("header-bottom");
        }
        if (direction === "down" && !top && toleranceExceeded) {
          if (this.root.classList.contains("header-pinned")) {
            this.root.classList.remove("header-pinned");
            this.root.style.removeProperty("overflow");
          }
          if (!this.root.classList.contains("header-unpinned")) {
            this.root.classList.add("header-unpinned");
          }
        } else if (direction === "up" && toleranceExceeded || top) {
          if (this.root.classList.contains("header-unpinned")) {
            this.root.classList.remove("header-unpinned");
          }
          if (!this.root.classList.contains("header-pinned")) {
            this.root.classList.add("header-pinned");
            setTimeout(() => {
              this.root.style.overflow = "visible";
            }, 150);
          }
        }
      })();
      this.scrolledLast = scrollY;
      this.scrolled = false;
    }
    onResize(event) {
      Array.from(this.root.querySelectorAll(".nav-item.item-open")).map((el) => {
        this.closeSubMenu(el, el.querySelector(".navbar-subnav-toggler"));
      });
      if (this.root.classList.contains("header-menu-active")) {
        this.toggleMenu(null);
      }
    }
    onClickOutside(event) {
      if (this.root.classList.contains("stay-open")) {
        return;
      }
      let target = event.target;
      if (!target) {
        return;
      }
      let closest = target.closest("header.header");
      if (closest && (closest === this.root || closest.closest("header.header") === this.root)) {
        return;
      }
      Array.from(this.root.querySelectorAll(".nav-item.item-open")).map((el) => {
        this.closeSubMenu(el, el.querySelector(".navbar-subnav-toggler"));
      });
      if (this.root.classList.contains("header-menu-active")) {
        this.toggleMenu(null);
      }
    }
    toggleMenu(event) {
      if (event) {
        event.preventDefault();
      }
      if (this.root.classList.contains("header-menu-active")) {
        this.frozen = false;
        this.closeMenu();
      } else {
        this.frozen = true;
        this.openMenu();
      }
    }
    async openMenu() {
      if (this.style === "static") {
        window.scrollTo({
          top: 0,
          behavior: "smooth"
        });
      } else if (this.style === "sticky") {
        if (this.root.classList.contains("header-scroll")) {
          this.root.classList.remove("header-scroll");
          await wait_default(150);
        }
      } else if (this.style === "slide") {
        this.root.style.height = `${window.innerHeight}px`;
      }
      if (this.toggler) {
        this.toggler.classList.remove("collapsed");
        if (this.toggler.hasAttribute("aria-expanded")) {
          this.toggler.setAttribute("aria-expanded", "true");
        }
      }
      this.root.classList.add("header-menu-active");
      document.body.style.overflow = "hidden";
    }
    closeMenu() {
      if (this.style === "sticky") {
        setTimeout(() => {
          this.stickyNavbar(null);
        }, 250);
      } else if (this.style === "slide") {
        this.root.style.removeProperty("height");
      }
      Array.from(this.root.querySelectorAll(".nav-item.item-open")).map((el) => {
        this.closeSubMenu(el, el.querySelector(".navbar-subnav-toggler"));
      });
      if (this.toggler) {
        this.toggler.classList.add("collapsed");
        if (this.toggler.hasAttribute("aria-expanded")) {
          this.toggler.setAttribute("aria-expanded", "false");
        }
      }
      this.root.classList.remove("header-menu-active");
      document.body.style.removeProperty("overflow");
    }
    toggleSubMenu(item, event) {
      if (event) {
        event.preventDefault();
      }
      if (item.classList.contains("collapsed")) {
        this.frozen = true;
        this.openSubMenu(item.closest(".nav-item"), item);
      } else {
        this.frozen = this.root.classList.contains("header-menu-active");
        this.closeSubMenu(item.closest(".nav-item"), item);
      }
    }
    async openSubMenu(item, button) {
      if (item.classList.contains("master-menu") && this.style === "sticky") {
        if (this.root.classList.contains("header-scroll")) {
          this.root.classList.remove("header-scroll");
          await wait_default(150);
        }
      }
      const subnav = item.querySelector(".navbar-subnav,.navbar-subnav-master");
      if ((this.root.classList.contains("header-menu-active") || item.classList.contains("master-menu")) && subnav) {
        const height = this.determineHeight(subnav, item);
        const parentNav = subnav.parentElement.closest(".navbar-subnav");
        if (parentNav) {
          parentNav.style.height = `${parentNav.offsetHeight + height}px`;
        }
        subnav.style.height = `${height}px`;
      }
      item.classList.add("item-open");
      if (button) {
        button.classList.remove("collapsed");
      }
    }
    closeSubMenu(item, button) {
      if (item.classList.contains("master-menu") && this.style === "sticky") {
        setTimeout(() => {
          this.stickyNavbar(null);
        }, 250);
      }
      const subnav = item.querySelector(".navbar-subnav,.navbar-subnav-master");
      if ((this.root.classList.contains("header-menu-active") || item.classList.contains("master-menu")) && subnav) {
        const parentNav = subnav.parentElement.closest(".navbar-subnav");
        if (parentNav) {
          parentNav.style.height = `${parentNav.offsetHeight - subnav.offsetHeight}px`;
        }
        subnav.style.removeProperty("height");
      }
      item.classList.remove("item-open");
      if (button) {
        button.classList.add("collapsed");
      }
      if (document.activeElement === button || document.activeElement === item) {
        document.activeElement.blur();
      }
    }
    toggleActions(event) {
      event.preventDefault();
      const navbarBrand = this.root.querySelector(".navbar-brand");
      if (this.actionToggler.parentElement.classList.contains("show")) {
        if (navbarBrand) {
          navbarBrand.classList.remove("hide");
        }
        this.actionToggler.parentElement.classList.remove("show");
        this.actionToggler.classList.add("collapsed");
      } else {
        if (navbarBrand) {
          navbarBrand.classList.add("hide");
        }
        this.actionToggler.parentElement.classList.add("show");
        this.actionToggler.classList.remove("collapsed");
      }
    }
  };
  var Navbar = _Navbar;
  Navbar.instances = /* @__PURE__ */ new Map();
  function invokeNavbar() {
    ready_default(function() {
      query_default("[data-newshub-header]").map((el) => {
        if (!Navbar.hasInstance(el)) {
          new Navbar(el);
        }
      });
    });
  }
  var navbar_default = invokeNavbar;

  // resources/ts/components/to-top.ts
  function invokeScrollToTop(element) {
    if (window.scrollY > 150) {
      element.classList.add("active");
    }
    window.addEventListener("scroll", () => {
      if (window.scrollY > 150) {
        element.classList.add("active");
      } else {
        element.classList.remove("active");
      }
    });
    element.addEventListener("click", (event) => {
      event.preventDefault();
      window.scrollTo({
        top: 0,
        behavior: "smooth"
      });
    });
  }
  var to_top_default = () => {
    ready_default(() => {
      query_default(".scroll-to-top").map((el) => invokeScrollToTop(el));
    });
  };

  // resources/ts/theme.ts
  anchors_default();
  bootstrap_default();
  color_picker_default();
  double_click_default();
  keen_slider_default();
  lightbox_default();
  navbar_default();
  to_top_default();
})();
//# sourceMappingURL=newshub.min.js.map

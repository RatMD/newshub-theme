var NewsHub = (() => {
  var __defProp = Object.defineProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // resources/js/utilities/query.js
  function query(selector, context = null) {
    return Array.from((context || document).querySelectorAll(selector));
  }
  var query_default = query;

  // resources/js/utilities/ready.js
  function ready(factory) {
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", factory);
    } else {
      factory();
    }
  }
  var ready_default = ready;

  // resources/js/components/bootstrap.js
  function invokeBootstrapDropdown(element) {
    document.addEventListener("click", (event) => {
      if (element === event.target || element.contains(event.target)) {
        event.preventDefault();
        let instance = Bootstrap.Dropdown.getOrCreateInstance(element, {
          autoClose: true
        });
        instance._inNavbar = false;
        instance.toggle();
      } else {
        let instance = Bootstrap.Dropdown.getInstance(element, {
          autoClose: true
        });
        if (instance && instance._isShown()) {
          instance.toggle();
        }
      }
    });
  }
  function invokeBootstrapTooltip(element) {
    if (element.hasAttribute("data-rat-init")) {
      return;
    }
    new Bootstrap.Tooltip(element);
    element.dataset.ratInit = "1";
  }
  function invokeBootstrapPopover(element) {
    if (element.hasAttribute("data-rat-init")) {
      return;
    }
    new Bootstrap.Popover(element);
    element.dataset.ratInit = "1";
  }
  var bootstrap_default = () => {
    ready_default(() => {
      query_default('[data-newshub-toggle="dropdown"]').map((el) => invokeBootstrapDropdown(el));
      query_default('[data-bs-toggle="tooltip"],[data-newshub-toggle="tooltip"]').map((el) => invokeBootstrapTooltip(el));
      query_default('[data-bs-toggle="popover"],[data-newshub-toggle="popover"]').map((el) => invokeBootstrapPopover(el));
    });
  };

  // resources/js/components/color-picker.js
  function invokeColorPicker(element) {
    const defaultScheme = window.newshub.defaultScheme;
    function onLoad() {
      query_default('[data-newshub-toggle="color-picker"]').map((el) => {
        let style = localStorage.getItem("newshub-color-scheme") || defaultScheme;
        if (style === "light") {
          el.checked = false;
        } else {
          el.checked = true;
        }
      });
    }
    onLoad();
    element.addEventListener("change", (event) => {
      let style = localStorage.getItem("newshub-color-scheme") || defaultScheme;
      let newStyle = style === "light" ? "dark" : "light";
      localStorage.setItem("newshub-color-scheme", newStyle);
      let styling = document.createElement("style");
      styling.innerText = "*,*::before,*::after{ transition: all 0.25s ease 0ms !important; }";
      document.head.appendChild(styling);
      document.body.classList.remove(style);
      document.body.classList.add(newStyle);
      setTimeout(() => styling.remove(), 500);
      onLoad();
      const customEvent = new CustomEvent("newshub:scheme", { detail: { prev: style, now: newStyle } });
      document.dispatchEvent(customEvent);
    });
  }
  var color_picker_default = () => {
    ready_default(() => {
      query_default('[data-newshub-toggle="color-picker"]').map((el) => invokeColorPicker(el));
    });
  };

  // resources/js/components/double-click.js
  function invokeDoubleClick(element) {
    element.querySelector("button.double-click-button").addEventListener("click", (event) => {
      let template = element.querySelector("template");
      let content = template.content.firstElementChild || template.content.textContent.trim();
      if (typeof content === "string") {
        let container = document.createElement("DIV");
        container.innerHTML = content.replace(/\&quot\;/g, '"');
        content = container.firstElementChild;
      }
      element.replaceWith(content);
    });
  }
  var double_click_default = () => {
    ready_default(() => {
      query_default('[data-newshub-toggle="double-click"]').map((el) => invokeDoubleClick(el));
    });
  };

  // resources/js/components/keen-slider.js
  function mergeHeroSliderOptions(options) {
    return Object.assign({}, {
      loop: true,
      slides: {
        perView: 1,
        spacing: 0
      },
      breakpoints: {
        "(min-width: 768px)": {
          loop: false,
          slides: {
            perView: 2,
            spacing: 20
          }
        },
        "(min-width: 1024px)": {
          loop: false,
          slides: {
            perView: 3,
            spacing: 30
          }
        },
        "(min-width: 1400px)": {
          loop: false,
          slides: {
            perView: 3,
            spacing: 50
          }
        }
      }
    }, options);
  }
  function autoplayPlugin(custom, slider) {
    let timeout;
    let mouseOver = false;
    function clearNextTimeout() {
      clearTimeout(timeout);
    }
    function nextTimeout() {
      clearTimeout(timeout);
      if (mouseOver) {
        return;
      }
      timeout = setTimeout(() => {
        slider.next();
      }, custom.autoplayInterval);
    }
    slider.on("created", () => {
      slider.container.addEventListener("mouseover", () => {
        mouseOver = true;
        clearNextTimeout();
      });
      slider.container.addEventListener("mouseout", () => {
        mouseOver = false;
        nextTimeout();
      });
      nextTimeout();
    });
    slider.on("dragStarted", clearNextTimeout);
    slider.on("animationEnded", nextTimeout);
    slider.on("updated", nextTimeout);
  }
  function marqueePlugin(custom, slider) {
    let animation = {
      duration: custom.autoplayInterval,
      easing: (t) => t
    };
    let mouseOver = false;
    let amount = slider.slides.length - 1;
    function clearAnimation() {
      slider.animator.stop();
    }
    function startAnimation() {
      slider.moveToIdx(slider.track.details.abs + amount, true, animation);
    }
    slider.on("created", (s) => {
      s.moveToIdx(amount, true, animation);
      slider.container.addEventListener("mouseover", () => {
        mouseOver = true;
        clearAnimation();
      });
      slider.container.addEventListener("mouseout", () => {
        mouseOver = false;
        startAnimation();
      });
    });
    slider.on("animationEnded", (s) => {
      slider.animator.stop();
      slider.moveToIdx(slider.track.details.abs + amount, true, animation);
    });
    slider.on("updated", (s) => {
      slider.animator.stop();
      slider.moveToIdx(slider.track.details.abs + amount, true, animation);
    });
  }
  function invokeKeenSlider(element, options = {}) {
    const plugins = [];
    if ((options.preset || "") === "hero") {
      options = mergeHeroSliderOptions(options);
    }
    const custom = Object.assign({
      animation: "slide",
      autoplay: false,
      autoplayStyle: "stops",
      autoplayInterval: 5e3
    }, options._newshub);
    delete options._newshub;
    if (!("selector" in options)) {
      options.selector = ".keen-slider-slide";
    }
    if (typeof custom.animation !== "undefined") {
      if (custom.animation === "fade") {
        options.loop = true;
        options.detailsChanged = (s) => {
          s.slides.forEach((element2, idx) => {
            element2.style.opacity = s.track.details.slides[idx].portion;
          });
        };
        options.renderMode = "custom";
      } else if (custom.animation === "zoom") {
        let scaleElement = function(element2, portion) {
          let scale_size = 0.7;
          let scale = 1 - (scale_size - scale_size * portion);
          let style = `scale(${scale})`;
          element2.style.transform = style;
          element2.style["-webkit-transform"] = style;
        };
        options.loop = true;
        options.detailsChanged = (s) => {
          const slides = s.track.details.slides;
          s.slides.forEach((element2, idx) => {
            scaleElement(element2.querySelector(".slide-image"), slides[idx].portion);
            scaleElement(element2.querySelector(".slide-content"), slides[idx].portion);
          });
        };
      }
    }
    if (typeof options.slides !== "undefined" && options.slides.perView > 1) {
      let perView = options.slides.perView;
      let spacing = options.slides.spacing;
      options.breakpoints = {
        "(min-width: 768px)": {
          loop: false,
          slides: {
            perView: Math.max(2, perView - 2),
            spacing: spacing * 0.5
          }
        },
        "(min-width: 1024px)": {
          loop: false,
          slides: {
            perView: Math.max(3, perView - 1),
            spacing: spacing * 0.75
          }
        },
        "(min-width: 1400px)": {
          loop: false,
          slides: {
            perView,
            spacing
          }
        }
      };
      options.slides = {
        perView: 1,
        spacing: 0
      };
    }
    if (custom.autoplay) {
      if (custom.autoplayStyle === "marquee") {
        plugins.push(marqueePlugin.bind(this, custom));
        options.loop = true;
        options.renderMode = "performance";
        options.drag = false;
        if (typeof options.breakpoints !== "undefined") {
          for (let key in options.breakpoints) {
            options.breakpoints[key].loop = true;
          }
        }
      } else {
        plugins.push(autoplayPlugin.bind(this, custom));
      }
    }
    const slider = new KeenSlider(element, options, plugins);
    element.__keenSlider = slider;
    if (element.hasAttribute("data-keen-controls")) {
      let updateControls = function(s) {
        const slide = s.track.details.abs;
        [].map.call(controls, (el) => {
          if (s.options.loop) {
            el.disabled = false;
          } else {
            let navi = el.dataset.keenSliderControl;
            if (navi === "next") {
              el.disabled = slide + s.options.slides.perView === s.track.details.slides.length;
            } else if (navi === "prev" || navi === "previous") {
              el.disabled = slide === 0;
            }
          }
        });
      };
      let controls;
      if (element.dataset.keenControls.trim().length > 0) {
        controls = document.querySelectorAll(element.dataset.keenControls.trim());
      } else {
        controls = element.querySelectorAll("[data-keen-slider-control]");
      }
      [].map.call(controls, (el) => {
        el.addEventListener("click", (event) => {
          event.preventDefault();
          let navi = el.dataset.keenSliderControl;
          if (navi === "next") {
            slider.next();
          } else if (navi === "prev" || navi === "previous") {
            slider.prev();
          } else if (!isNaN(parseInt(navi, 10))) {
            slider.moveToIdx(parseInt(navi, 10));
          }
        });
      });
      updateControls(slider);
      slider.on("created", updateControls);
      slider.on("optionsChanged", updateControls);
      slider.on("slideChanged", updateControls);
    }
    if (element.hasAttribute("data-keen-indicators")) {
      let updateIndicators = function(s) {
        const number = s.options.slides.perView;
        const amount = s.track.details.slides.length;
        if (indicators.length !== amount / number) {
          let buttons = [];
          for (let i = 0; i < amount / number; i++) {
            let button = indicators[0].cloneNode(true);
            button.dataset.keenSliderIndicator = i.toString();
            button.addEventListener("click", (event) => {
              event.preventDefault();
              let num = parseInt(button.dataset.keenSliderIndicator);
              slider.moveToIdx(num * number);
            });
            buttons.push(button);
          }
          let parent = indicators[0].parentElement;
          parent.innerHTML = "";
          parent.append(...buttons);
          indicators = buttons;
        }
        const slide = s.track.details.rel / number;
        [].map.call(indicators, (el, idx) => {
          el.classList[idx === slide ? "add" : "remove"]("active");
        });
      };
      let indicators;
      if (element.dataset.keenIndicators.trim().length > 0) {
        indicators = document.querySelectorAll(element.dataset.keenIndicators.trim());
      } else {
        indicators = element.querySelectorAll("[data-keen-slider-indicator]");
      }
      [].map.call(indicators, (el) => {
        el.addEventListener("click", (event) => {
          event.preventDefault();
          slider.moveToIdx(parseInt(el.dataset.keenSliderIndicator));
        });
      });
      updateIndicators(slider);
      slider.on("created", updateIndicators);
      slider.on("optionsChanged", updateIndicators);
      slider.on("slideChanged", updateIndicators);
    }
    function updateMultipleClass(s) {
      console.log(s.options);
    }
    slider.on("created", updateMultipleClass);
    slider.on("optionsChanged", updateMultipleClass);
  }
  var keen_slider_default = () => {
    ready_default(() => {
      query_default("[data-keen-slider]").map((el) => {
        let temp = el.dataset.keenSlider.trim();
        var options = {};
        if (temp.length > 0 && temp[0] === "{") {
          try {
            let jsonParser = typeof ocJSON === "function" ? ocJSON : typeof (oc || {}).parseJSON === "function" ? oc.parseJSON : JSON.parse;
            let handle = jsonParser(temp);
            if (typeof handle === "object") {
              options = handle;
            }
          } catch (e) {
            console.error(`The KeenSlider data property is not a valid JSON: '${temp}'`);
          }
        }
        invokeKeenSlider(el, options);
      });
    });
  };

  // resources/js/components/lightbox.js
  function invokeLightbox(element) {
    element.addEventListener("click", (event) => {
      event.preventDefault();
      let lightbox = new Lightbox(element, {
        keyboard: true
      });
      lightbox.carouselElement.classList.add("slide");
      lightbox.show();
    });
  }
  var lightbox_default = () => {
    ready_default(() => {
      query_default('[data-newshub-toggle="lightbox"]').map((el) => invokeLightbox(el));
      query_default(".post-lightbox").map((el) => {
        el.dataset.gallery = "post-gallery";
        el.dataset.caption = el.querySelector("img").alt;
        invokeLightbox(el);
      });
    });
  };

  // resources/js/utilities/wait.js
  function wait(ms) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve();
      }, ms);
    });
  }
  var wait_default = wait;

  // resources/js/components/navbar.js
  var _Navbar = class {
    constructor(el) {
      __publicField(this, "root");
      __publicField(this, "style");
      __publicField(this, "toggler");
      __publicField(this, "actionToggler");
      __publicField(this, "frozen", false);
      __publicField(this, "scrolled", false);
      __publicField(this, "scrolledAnimationId", null);
      __publicField(this, "scrolledLast", 0);
      if (_Navbar.hasInstance(el)) {
        throw new Error("A Navbar instance has already been initialized for the passed element.");
      }
      _Navbar.instances.set(el, this);
      this.root = el;
      this.style = "static";
      if (el.classList.contains("header-sticky")) {
        this.style = "sticky";
        window.addEventListener("scroll", this.stickyNavbar.bind(this));
        setTimeout(() => {
          this.stickyNavbar(null);
        }, 150);
      }
      if (el.classList.contains("header-slide")) {
        this.style = "slide";
        this.scrolledLast = window.pageYOffset ? window.pageYOffset : (document.documentElement || document.body).scrollTop;
        let mainNavbar = this.root.querySelector(".navbar-main");
        let size = 0 + (mainNavbar.classList.contains("with-meta-menu") ? 1 : 0) + (mainNavbar.classList.contains("with-social-menu") ? 1 : 0);
        this.root.classList.add(size == 1 ? "medium" : size === 2 ? "large" : "small");
        setTimeout(() => {
          window.addEventListener("scroll", this.slideNavbar.bind(this), {
            passive: true,
            capture: false
          });
          this.slideNavbarUpdate();
        }, 150);
      }
      let toggler = this.root.querySelector(".navbar-toggler");
      if (toggler) {
        this.toggler = toggler;
        this.toggler.addEventListener("click", this.toggleMenu.bind(this));
      }
      let actionToggler = this.root.querySelector(".navbar-action-toggler");
      if (actionToggler) {
        this.actionToggler = actionToggler;
        this.actionToggler.addEventListener("click", this.toggleActions.bind(this));
      }
      Array.from(this.root.querySelectorAll(".navbar-subnav-toggler")).map((el2) => {
        el2.addEventListener("click", this.toggleSubMenu.bind(this, el2));
      });
      Array.from(this.root.querySelectorAll(".nav-title")).map((el2) => {
        let toggler2 = el2.parentElement.querySelector(".navbar-subnav-toggler");
        if (toggler2) {
          el2.addEventListener("click", this.toggleSubMenu.bind(this, toggler2));
        }
      });
      window.addEventListener("resize", this.onResize.bind(this), {
        passive: true,
        capture: false
      });
      document.addEventListener("click", this.onClickOutside.bind(this), {
        passive: true,
        capture: false
      });
    }
    static getInstance(el) {
      if (!this.instances.has(el)) {
        throw new Error("The passed element has not bee initialized yet.");
      } else {
        return this.instances.get(el);
      }
    }
    static hasInstance(el) {
      return this.instances.has(el);
    }
    determineHeight(element, parent) {
      let clone = element.cloneNode(true);
      clone.style.height = "auto";
      clone.style.minHeight = "none";
      clone.style.overflow = "visible";
      clone.style.position = "absolute";
      clone.style.visibility = "hidden";
      clone.style.opacity = 0;
      parent.appendChild(clone);
      const height = clone.offsetHeight;
      parent.removeChild(clone);
      return height;
    }
    stickyNavbar(event) {
      if (this.frozen) {
        return;
      }
      if (window.scrollY > 50) {
        this.root.classList.add("header-scroll");
      } else if (window.scrollY === 0) {
        this.root.classList.remove("header-scroll");
      }
    }
    slideNavbar(event) {
      if (!this.scrolled) {
        this.scrolled = true;
        this.scrolledAnimationId = requestAnimationFrame(this.slideNavbarUpdate.bind(this));
      }
    }
    slideNavbarUpdate() {
      let html = document.documentElement;
      let body = document.body;
      let scrollY = Math.round(window.pageYOffset ? window.pageYOffset : (html || body).scrollTop);
      let height = window.innerHeight || html.clientHeight || body.clientHeight;
      let scrollHeight = Math.max(
        body.scrollHeight,
        html.scrollHeight,
        body.offsetHeight,
        html.offsetHeight,
        body.clientHeight,
        html.clientHeight
      );
      let direction = scrollY > this.scrolledLast ? "down" : "up";
      let distance = Math.abs(scrollY - this.scrolledLast);
      let isOutOfBounds = scrollY < 0 || scrollY + height > scrollHeight;
      let top = scrollY <= 0;
      let bottom = scrollY + height >= scrollHeight;
      let toleranceExceeded = distance > 0;
      (() => {
        if (isOutOfBounds) {
          return;
        }
        if (this.frozen) {
          return;
        }
        if (top && !this.root.classList.contains("header-top")) {
          this.root.classList.add("header-top");
        } else if (!top && this.root.classList.contains("header-top")) {
          this.root.classList.remove("header-top");
        }
        if (bottom && !this.root.classList.contains("header-bottom")) {
          this.root.classList.add("header-bottom");
        } else if (!bottom && this.root.classList.contains("header-bottom")) {
          this.root.classList.remove("header-bottom");
        }
        if (direction === "down" && !top && toleranceExceeded) {
          if (this.root.classList.contains("header-pinned")) {
            this.root.classList.remove("header-pinned");
            this.root.style.removeProperty("overflow");
          }
          if (!this.root.classList.contains("header-unpinned")) {
            this.root.classList.add("header-unpinned");
          }
        } else if (direction === "up" && toleranceExceeded || top) {
          if (this.root.classList.contains("header-unpinned")) {
            this.root.classList.remove("header-unpinned");
          }
          if (!this.root.classList.contains("header-pinned")) {
            this.root.classList.add("header-pinned");
            setTimeout(() => {
              this.root.style.overflow = "visible";
            }, 150);
          }
        }
      })();
      this.scrolledLast = scrollY;
      this.scrolled = false;
    }
    onResize(event) {
      Array.from(this.root.querySelectorAll(".nav-item.item-open")).map((el) => {
        this.closeSubMenu(el, el.querySelector(".navbar-subnav-toggler"));
      });
      if (this.root.classList.contains("header-menu-active")) {
        this.toggleMenu();
      }
    }
    onClickOutside(event) {
      if (this.root.classList.contains("stay-open")) {
        return;
      }
      let target = event.target;
      if (!target) {
        return;
      }
      let closest = target.closest("header.header");
      if (closest && (closest === this.root || closest.closest("header.header") === this.root)) {
        return;
      }
      Array.from(this.root.querySelectorAll(".nav-item.item-open")).map((el) => {
        this.closeSubMenu(el, el.querySelector(".navbar-subnav-toggler"));
      });
      if (this.root.classList.contains("header-menu-active")) {
        this.toggleMenu();
      }
    }
    toggleMenu(event) {
      if (event) {
        event.preventDefault();
      }
      if (this.root.classList.contains("header-menu-active")) {
        this.frozen = false;
        this.closeMenu();
      } else {
        this.frozen = true;
        this.openMenu();
      }
    }
    async openMenu() {
      if (this.style === "static") {
        window.scrollTo({
          top: 0,
          behavior: "smooth"
        });
      } else if (this.style === "sticky") {
        if (this.root.classList.contains("header-scroll")) {
          this.root.classList.remove("header-scroll");
          await wait_default(150);
        }
      } else if (this.style === "slide") {
        this.root.style.height = `${window.innerHeight}px`;
      }
      if (this.toggler) {
        this.toggler.classList.remove("collapsed");
        if (this.toggler.hasAttribute("aria-expanded")) {
          this.toggler.setAttribute("aria-expanded", "true");
        }
      }
      this.root.classList.add("header-menu-active");
      document.body.style.overflow = "hidden";
    }
    closeMenu() {
      if (this.style === "sticky") {
        setTimeout(() => {
          this.stickyNavbar();
        }, 250);
      } else if (this.style === "slide") {
        this.root.style.removeProperty("height");
      }
      Array.from(this.root.querySelectorAll(".nav-item.item-open")).map((el) => {
        this.closeSubMenu(el, el.querySelector(".navbar-subnav-toggler"));
      });
      if (this.toggler) {
        this.toggler.classList.add("collapsed");
        if (this.toggler.hasAttribute("aria-expanded")) {
          this.toggler.setAttribute("aria-expanded", "false");
        }
      }
      this.root.classList.remove("header-menu-active");
      document.body.style.removeProperty("overflow");
    }
    toggleSubMenu(item, event) {
      if (event) {
        event.preventDefault();
      }
      if (item.classList.contains("collapsed")) {
        this.frozen = true;
        this.openSubMenu(item.closest(".nav-item"), item);
      } else {
        this.frozen = this.root.classList.contains("header-menu-active");
        this.closeSubMenu(item.closest(".nav-item"), item);
      }
    }
    async openSubMenu(item, button) {
      if (item.classList.contains("master-menu") && this.style === "sticky") {
        if (this.root.classList.contains("header-scroll")) {
          this.root.classList.remove("header-scroll");
          await wait_default(150);
        }
      }
      const subnav = item.querySelector(".navbar-subnav,.navbar-subnav-master");
      if ((this.root.classList.contains("header-menu-active") || item.classList.contains("master-menu")) && subnav) {
        const height = this.determineHeight(subnav, item);
        const parentNav = subnav.parentElement.closest(".navbar-subnav");
        if (parentNav) {
          parentNav.style.height = `${parentNav.offsetHeight + height}px`;
        }
        subnav.style.height = `${height}px`;
      }
      item.classList.add("item-open");
      if (button) {
        button.classList.remove("collapsed");
      }
    }
    closeSubMenu(item, button) {
      if (item.classList.contains("master-menu") && this.style === "sticky") {
        setTimeout(() => {
          this.stickyNavbar();
        }, 250);
      }
      const subnav = item.querySelector(".navbar-subnav,.navbar-subnav-master");
      if ((this.root.classList.contains("header-menu-active") || item.classList.contains("master-menu")) && subnav) {
        const parentNav = subnav.parentElement.closest(".navbar-subnav");
        if (parentNav) {
          parentNav.style.height = `${parentNav.offsetHeight - subnav.offsetHeight}px`;
        }
        subnav.style.removeProperty("height");
      }
      item.classList.remove("item-open");
      if (button) {
        button.classList.add("collapsed");
      }
      if (document.activeElement === button || document.activeElement === item) {
        document.activeElement.blur();
      }
    }
    toggleActions(event) {
      event.preventDefault();
      const navbarBrand = this.root.querySelector(".navbar-brand");
      if (this.actionToggler.parentElement.classList.contains("show")) {
        if (navbarBrand) {
          navbarBrand.classList.remove("hide");
        }
        this.actionToggler.parentElement.classList.remove("show");
        this.actionToggler.classList.add("collapsed");
      } else {
        if (navbarBrand) {
          navbarBrand.classList.add("hide");
        }
        this.actionToggler.parentElement.classList.add("show");
        this.actionToggler.classList.remove("collapsed");
      }
    }
  };
  var Navbar = _Navbar;
  __publicField(Navbar, "instances", /* @__PURE__ */ new Map());
  function invokeNavbar() {
    ready_default(function() {
      query_default("[data-newshub-header]").map((el) => {
        if (!Navbar.hasInstance(el)) {
          new Navbar(el);
        }
      });
    });
  }
  var navbar_default = invokeNavbar;

  // resources/js/components/to-top.js
  function invokeScrollToTop(element) {
    if (window.scrollY > 150) {
      element.classList.add("active");
    }
    window.addEventListener("scroll", () => {
      if (window.scrollY > 150) {
        element.classList.add("active");
      } else {
        element.classList.remove("active");
      }
    });
    element.addEventListener("click", (event) => {
      event.preventDefault();
      window.scrollTo({
        top: 0,
        behavior: "smooth"
      });
    });
  }
  var to_top_default = () => {
    ready_default(() => {
      query_default(".scroll-to-top").map((el) => invokeScrollToTop(el));
    });
  };

  // resources/js/theme.js
  bootstrap_default();
  color_picker_default();
  double_click_default();
  keen_slider_default();
  lightbox_default();
  navbar_default();
  to_top_default();
})();
//# sourceMappingURL=newshub.min.js.map

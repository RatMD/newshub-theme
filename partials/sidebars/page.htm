
==
function onEnd()
{
    $md = new \October\Rain\Parse\Markdown;
    $result = $md->parse('# test');

    preg_match_all('/<h([1-6])(?:[^\>]+)?>(.*?)<\/h\1>/', $this->page->content, $matches);
    $count = count($matches[0]);

    $result = [];

    $keys = [];
    $current = &$result;
    $currentId = 0;
    $currentLevel = 0;
    $walker = [];
    for ($i = 0; $i < $count-1; $i++) {
        if (strpos($matches[2][$i], '<!-- notoc -->') === 0) {
            continue;
        }
        if (strpos($matches[2][$i], '<!--notoc-->') === 0) {
            continue;
        }

        $level = intval($matches[1][$i]);
        $label = $matches[2][$i];

        // Prepend Page Title
        if ($level > 1 && empty($result)) {
            $id = 'root';
            $current[$id] = [
                'id'        => $id,
                'level'     => 1,
                'label'     => $this->page->title,
                'children'  => []
            ];
            $currentLevel = 1;
            $walker[] = $id;
            $currentId = $id;
        }

        // Generate Unique id
        $id = strtolower(preg_replace('/[ ]+/', '_',
            preg_replace('/[^a-zA-Z0-9_ ]/', '', $label)
        ));
        $temp = 0;
        while (array_key_exists($id, $keys)) {
            if ($temp > 0) {
                $id = substr($id, 0, -strlen(strval($temp)));
            }
            $id = $id . '_' . ++$temp;
        }
        $keys[] = $id;

        // Go one level deeper
        if ($level > $currentLevel) {
            $walker[] = $id;
            $current = &$current[$currentId]['children'];
            $currentLevel = $level;

        // Travel back by x levels
        } else if ($level < $currentLevel) {
            $length = $level - $currentLevel;
            $walker = array_slice($walker, 0, $length-1);
            $current = &$result;
            foreach ($walker AS $prevId) {
                $current = &$current[$prevId]['children'];
            }
            $walker[] = $id;
            $currentLevel = $level;
        }

        // Set Element
        $current[$id] = [
            'id'        => $id,
            'level'     => $level,
            'label'     => $label,
            'children'  => []
        ];
        $currentId = $id; 
    }
    $this['toc'] = $result;
}
==

{% macro recursive_toc(items, depth=1) %}
    <ul class="toc toc-depth-{{depth}}">
        {% for item in items %}
            <li class="toc-item">
                <a href="#{{ item.id }}" title="{{ 'site.widget.toc.goto' | trans }}: {{ item.label }}">{{ item.label }}</a>
            </li>

            {% if item.children %}
                {{ _self.recursive_toc(item.children, depth+1) }}
            {% endif %}
        {% endfor %}
    </ul>
{% endmacro %}


<div class="card card-simple">
    <header class="card-header">
        <span class="card-title">{{ 'site.widget.toc' | trans }}</span>
    </header>

    <article class="card-body">
        {{ _self.recursive_toc(toc) }}
    </article>
</div>